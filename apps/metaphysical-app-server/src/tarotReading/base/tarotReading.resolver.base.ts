/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TarotReading } from "./TarotReading";
import { TarotReadingCountArgs } from "./TarotReadingCountArgs";
import { TarotReadingFindManyArgs } from "./TarotReadingFindManyArgs";
import { TarotReadingFindUniqueArgs } from "./TarotReadingFindUniqueArgs";
import { CreateTarotReadingArgs } from "./CreateTarotReadingArgs";
import { UpdateTarotReadingArgs } from "./UpdateTarotReadingArgs";
import { DeleteTarotReadingArgs } from "./DeleteTarotReadingArgs";
import { TarotReadingService } from "../tarotReading.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TarotReading)
export class TarotReadingResolverBase {
  constructor(
    protected readonly service: TarotReadingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TarotReading",
    action: "read",
    possession: "any",
  })
  async _tarotReadingsMeta(
    @graphql.Args() args: TarotReadingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TarotReading])
  @nestAccessControl.UseRoles({
    resource: "TarotReading",
    action: "read",
    possession: "any",
  })
  async tarotReadings(
    @graphql.Args() args: TarotReadingFindManyArgs
  ): Promise<TarotReading[]> {
    return this.service.tarotReadings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TarotReading, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TarotReading",
    action: "read",
    possession: "own",
  })
  async tarotReading(
    @graphql.Args() args: TarotReadingFindUniqueArgs
  ): Promise<TarotReading | null> {
    const result = await this.service.tarotReading(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TarotReading)
  @nestAccessControl.UseRoles({
    resource: "TarotReading",
    action: "create",
    possession: "any",
  })
  async createTarotReading(
    @graphql.Args() args: CreateTarotReadingArgs
  ): Promise<TarotReading> {
    return await this.service.createTarotReading({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TarotReading)
  @nestAccessControl.UseRoles({
    resource: "TarotReading",
    action: "update",
    possession: "any",
  })
  async updateTarotReading(
    @graphql.Args() args: UpdateTarotReadingArgs
  ): Promise<TarotReading | null> {
    try {
      return await this.service.updateTarotReading({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TarotReading)
  @nestAccessControl.UseRoles({
    resource: "TarotReading",
    action: "delete",
    possession: "any",
  })
  async deleteTarotReading(
    @graphql.Args() args: DeleteTarotReadingArgs
  ): Promise<TarotReading | null> {
    try {
      return await this.service.deleteTarotReading(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
