/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Ritual } from "./Ritual";
import { RitualCountArgs } from "./RitualCountArgs";
import { RitualFindManyArgs } from "./RitualFindManyArgs";
import { RitualFindUniqueArgs } from "./RitualFindUniqueArgs";
import { CreateRitualArgs } from "./CreateRitualArgs";
import { UpdateRitualArgs } from "./UpdateRitualArgs";
import { DeleteRitualArgs } from "./DeleteRitualArgs";
import { RitualService } from "../ritual.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Ritual)
export class RitualResolverBase {
  constructor(
    protected readonly service: RitualService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ritual",
    action: "read",
    possession: "any",
  })
  async _ritualsMeta(
    @graphql.Args() args: RitualCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ritual])
  @nestAccessControl.UseRoles({
    resource: "Ritual",
    action: "read",
    possession: "any",
  })
  async rituals(@graphql.Args() args: RitualFindManyArgs): Promise<Ritual[]> {
    return this.service.rituals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ritual, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ritual",
    action: "read",
    possession: "own",
  })
  async ritual(
    @graphql.Args() args: RitualFindUniqueArgs
  ): Promise<Ritual | null> {
    const result = await this.service.ritual(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ritual)
  @nestAccessControl.UseRoles({
    resource: "Ritual",
    action: "create",
    possession: "any",
  })
  async createRitual(@graphql.Args() args: CreateRitualArgs): Promise<Ritual> {
    return await this.service.createRitual({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ritual)
  @nestAccessControl.UseRoles({
    resource: "Ritual",
    action: "update",
    possession: "any",
  })
  async updateRitual(
    @graphql.Args() args: UpdateRitualArgs
  ): Promise<Ritual | null> {
    try {
      return await this.service.updateRitual({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ritual)
  @nestAccessControl.UseRoles({
    resource: "Ritual",
    action: "delete",
    possession: "any",
  })
  async deleteRitual(
    @graphql.Args() args: DeleteRitualArgs
  ): Promise<Ritual | null> {
    try {
      return await this.service.deleteRitual(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
