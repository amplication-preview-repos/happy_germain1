/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SpellBookService } from "../spellBook.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SpellBookCreateInput } from "./SpellBookCreateInput";
import { SpellBook } from "./SpellBook";
import { SpellBookFindManyArgs } from "./SpellBookFindManyArgs";
import { SpellBookWhereUniqueInput } from "./SpellBookWhereUniqueInput";
import { SpellBookUpdateInput } from "./SpellBookUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SpellBookControllerBase {
  constructor(
    protected readonly service: SpellBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SpellBook })
  @nestAccessControl.UseRoles({
    resource: "SpellBook",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSpellBook(
    @common.Body() data: SpellBookCreateInput
  ): Promise<SpellBook> {
    return await this.service.createSpellBook({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        ingredients: true,
        instructions: true,
        spellName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SpellBook] })
  @ApiNestedQuery(SpellBookFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SpellBook",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async spellBooks(@common.Req() request: Request): Promise<SpellBook[]> {
    const args = plainToClass(SpellBookFindManyArgs, request.query);
    return this.service.spellBooks({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        ingredients: true,
        instructions: true,
        spellName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SpellBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SpellBook",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async spellBook(
    @common.Param() params: SpellBookWhereUniqueInput
  ): Promise<SpellBook | null> {
    const result = await this.service.spellBook({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        ingredients: true,
        instructions: true,
        spellName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SpellBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SpellBook",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSpellBook(
    @common.Param() params: SpellBookWhereUniqueInput,
    @common.Body() data: SpellBookUpdateInput
  ): Promise<SpellBook | null> {
    try {
      return await this.service.updateSpellBook({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          ingredients: true,
          instructions: true,
          spellName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SpellBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SpellBook",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSpellBook(
    @common.Param() params: SpellBookWhereUniqueInput
  ): Promise<SpellBook | null> {
    try {
      return await this.service.deleteSpellBook({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          ingredients: true,
          instructions: true,
          spellName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
