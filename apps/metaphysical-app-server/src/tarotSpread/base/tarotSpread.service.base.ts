/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TarotSpread as PrismaTarotSpread } from "@prisma/client";

export class TarotSpreadServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TarotSpreadCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tarotSpread.count(args);
  }

  async tarotSpreads(
    args: Prisma.TarotSpreadFindManyArgs
  ): Promise<PrismaTarotSpread[]> {
    return this.prisma.tarotSpread.findMany(args);
  }
  async tarotSpread(
    args: Prisma.TarotSpreadFindUniqueArgs
  ): Promise<PrismaTarotSpread | null> {
    return this.prisma.tarotSpread.findUnique(args);
  }
  async createTarotSpread(
    args: Prisma.TarotSpreadCreateArgs
  ): Promise<PrismaTarotSpread> {
    return this.prisma.tarotSpread.create(args);
  }
  async updateTarotSpread(
    args: Prisma.TarotSpreadUpdateArgs
  ): Promise<PrismaTarotSpread> {
    return this.prisma.tarotSpread.update(args);
  }
  async deleteTarotSpread(
    args: Prisma.TarotSpreadDeleteArgs
  ): Promise<PrismaTarotSpread> {
    return this.prisma.tarotSpread.delete(args);
  }
}
